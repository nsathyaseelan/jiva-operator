- name: Derive PV from application PVC 
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.volumeName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Record the jiva controller deployment of the PV
  set_fact: 
    # Depends on the naming convention in maya-apiserver (<pv-id>-rep)  
    jiva_controller_deploy: "{{ pv.stdout }}-jiva-ctrl"

- name: Record the jiva controller container name
  set_fact:
    # Depends on the naming convention in maya-apiserver (<pv-id>-rep)
    jiva_controller_name: "jiva-controller"

- name: Get the resourceVersion of the target deploy before fault injection
  shell: >
    kubectl get deploy {{ jiva_controller_deploy }} -n {{ target_ns }} 
    -o=custom-columns=NAME:".metadata.resourceVersion" --no-headers
  args:
    executable: /bin/bash
  register: rv_bef

- name: Get jiva controller pod belonging to the PV
  shell: > 
    kubectl get pods --no-headers -l openebs.io/component=jiva-controller -n {{ target_ns }}
    -o jsonpath="{.items[?(@.metadata.labels.openebs\\.io/persistent-volume==\"{{pv.stdout}}\")].metadata.name}" 
  args:
    executable: /bin/bash
  register: jiva_controller_pod

- name: Get controller svc
  shell: >
    kubectl get svc -l openebs.io/controller-service=jiva-controller-svc,openebs.io/persistent-volume="{{ pv.stdout }}" 
    -n {{ target_ns }} -o=jsonpath='{.items[0].spec.clusterIP}'
  args:
    executable: /bin/bash
  register: controller_svc
  failed_when: controller_svc.stdout == ""

- name: Install jq package inside a controller container
  shell: >
    kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ target_ns }} -c {{ jiva_controller_name }} 
    -- bash -c "apt-get update && apt-get install -y jq"
  args:
    executable: /bin/bash

- name: Getting the Replicastatus before killing controller
  shell: >
   kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ target_ns }} 
   -c {{ jiva_controller_name }} curl http://127.0.0.1:9501/v1/replicas | jq -r '.data[].mode'
  args:
    executable: /bin/bash
  register: rstatus_before  

- name: Kill the jiva controller pod 
  shell: >
    kubectl delete pod {{ jiva_controller_pod.stdout }} -n {{ target_ns }}
  args:
    executable: /bin/bash

- name: Get jiva controller pod belonging to the PV
  shell: >
    kubectl get pods --no-headers -l openebs.io/component=jiva-controller -n {{ target_ns }}
    -o jsonpath="{.items[?(@.metadata.labels.openebs\\.io/persistent-volume==\"{{pv.stdout}}\")].metadata.name}"
  args:
    executable: /bin/bash
  register: jctrl_pod_after

- name: Check jiva controller container status
  shell: >
    kubectl get pods {{ jctrl_pod_after.stdout }} -n {{ target_ns }} 
    -o jsonpath='{.status.containerStatuses[?(@.name=="jiva-controller")].state}' | grep running
  args:
    executable: /bin/bash
  register: container_status
  until: "'running' in container_status.stdout"
  delay: 3
  retries: 20

- name: Install jq package inside a controller container
  shell: >
    kubectl exec -it {{ jctrl_pod_after.stdout }} -n {{ target_ns }} -c {{ jiva_controller_name }}
    -- bash -c "apt-get update && apt-get install -y jq"
  args:
    executable: /bin/bash

- name: Getting the Replicastatus after killing the controller
  shell: >
   kubectl exec -it {{ jctrl_pod_after.stdout }} -n {{ target_ns }}
   -c {{ jiva_controller_name }} curl http://127.0.0.1:9501/v1/replicas | jq -r '.data[].mode'
  args:
    executable: /bin/bash
  register: rstatus_after
  until: "rstatus_after.stdout_lines == rstatus_before.stdout_lines and 'RW' in rstatus_after.stdout"
  retries: 30
  delay: 10

- name: Get the resourceVersion of the target deploy after fault injection
  shell: >
    kubectl get deploy {{ jiva_controller_deploy }} -n {{ target_ns }}
    -o=custom-columns=NAME:".metadata.resourceVersion" --no-headers 
  args:
    executable: /bin/bash
  register: rv_aft

- name: Compare resourceVersions of target deployment
  debug:
    msg: "Verified target pods were restarted by fault injection"
  failed_when: "rv_bef.stdout | int == rv_aft.stdout | int"

