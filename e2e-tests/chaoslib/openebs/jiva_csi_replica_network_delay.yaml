- block:
    - name: Derive PV from application PVC 
      shell: >
        kubectl get pvc {{ app_pvc }}
        -o custom-columns=:spec.volumeName -n {{ app_ns }} --no-headers
      args:
        executable: /bin/bash
      register: pv

    - name: Identify the jiva controller pod belonging to the PV
      shell: > 
        kubectl get pods -l openebs.io/component=jiva-controller,openebs.io/persistent-volume="{{ pv.stdout }}"
        -n {{ operator_ns }} --no-headers -o custom-columns=:.metadata.name
      args:
        executable: /bin/bash
      register: jiva_ctrl_pod

    - name: Record the jiva controller pod name
      set_fact:
        jiva_controller_pod: "{{ jiva_ctrl_pod.stdout }}"

    - name: Record the jiva controller container name
      set_fact:
        # Depends on the naming convention in maya-apiserver (<pv-id>-rep)
        jiva_controller_name: "jiva-controller"

    - name: Identify the jiva replica pod belonging to the PV
      shell: > 
        kubectl get pods -l openebs.io/component=jiva-replica
        -n {{ operator_ns }} --no-headers | grep {{ pv.stdout }} 
        | shuf -n 1| awk {'print $1'}
      args:
        executable: /bin/bash
      register: jiva_rep_pod

    - name: Record the jiva replica pod name
      set_fact:
        jiva_replica_pod: "{{ jiva_rep_pod.stdout }}"

    - name: Record the jiva replica container name
      set_fact:
        # Depends on the naming convention in maya-apiserver (<pv-id>-rep)
        jiva_replica_name: "jiva-replica"

    - name: Get the node on which the jiva replica is scheduled
      shell: >
        kubectl get pod {{ jiva_replica_pod }} -n {{ operator_ns }}
        --no-headers -o custom-columns=:spec.nodeName
      args:
        executable: /bin/bash
      register: node  

    - name: Get IP for the controller svc
      shell: >
        kubectl get svc -l openebs.io/controller-service=jiva-controller-svc,openebs.io/persistent-volume="{{ pv.stdout }}" 
        -n {{ operator_ns }} -o=jsonpath='{.items[0].spec.clusterIP}'
      args:
        executable: /bin/bash
      register: ctrl_svc
      failed_when: ctrl_svc.stdout == ""

    - name: Record this IP for the controller svc
      set_fact:
        controller_svc_ip: "{{ ctrl_svc.stdout }}"

    - name: Install jq package inside a controller container
      shell: >
        kubectl exec -it {{ jiva_controller_pod }} -n {{ operator_ns }} -c {{ jiva_controller_name }} 
        -- bash -c "apt-get update && apt-get install -y jq && apt-get install -y iproute2"
      args:
        executable: /bin/bash

    - name: Install jq package inside a replica container
      shell: >
        kubectl exec -it {{ jiva_replica_pod }} -n {{ operator_ns }} -c {{ jiva_replica_name }}
        -- bash -c "apt-get update && apt-get install -y jq && apt-get install -y iproute2"
      args:
        executable: /bin/bash

    - name: Getting the ReplicaCount before injecting delay
      shell: >
        kubectl exec -it {{ jiva_controller_pod }} -n {{ operator_ns }} 
        -c {{ jiva_controller_name }} curl http://"{{controller_svc_ip}}":9501/v1/volumes | jq -r '.data[].replicaCount'
      args:
        executable: /bin/bash
      register: rcount_before

    - name: Record replica count value before injecting delay
      set_fact:
        replica_count_before: "{{ rcount_before.stdout }}"

    - name: Inject netem delay on replica pod
      shell: >
        kubectl exec -it {{ jiva_replica_pod }} -n {{ operator_ns }} --container {{ jiva_replica_name }} 
        -- bash -c "tc qdisc add dev eth0 root netem delay {{ n_delay }}ms"
      args:
        executable: /bin/bash

  when: status == 'induce'

- block: 

    - name: Remove the netem delay rule from replica pod
      shell: >
        kubectl exec -it {{ jiva_replica_pod }} -n {{ operator_ns }} --container {{ jiva_replica_name }} 
        -- bash -c "tc qdisc del dev eth0 root netem delay {{ n_delay }}ms"
      args:
        executable: /bin/bash

    - name: Verifying the replicas post network recovery
      shell: >
        kubectl exec -it {{ jiva_controller_pod }} -n {{ operator_ns }} 
        -c {{ jiva_controller_name }} curl http://"{{controller_svc_ip}}":9501/v1/volumes | jq -r '.data[].replicaCount'
      args:
        executable: /bin/bash
      register: replica_count_after
      until: replica_count_after.stdout == replica_count_before
      retries: 10
      delay: 15
      
  when: status == 'remove'

