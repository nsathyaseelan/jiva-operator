---

# This utilty task file check for node affinity for the POD
# This utility task uses pod_name and namespace as variables.


- name: Getting the Node name for the given pod
  shell: kubectl get pod {{ pod_name }} -n {{ ns }} -o jsonpath='{.spec.nodeName}'
  register: node_name

- name: Cordoning the Node
  shell: kubectl cordon {{ node_name.stdout }}  

- name: Checking whether Node is cordoned
  shell: kubectl get nodes {{ node_name.stdout }} -o jsonpath='{.spec.unschedulable}'
  register: result
  failed_when: "'true' not in result.stdout" 

- name: Deleting the specified pod
  shell: kubectl delete pod {{ pod_name }} -n {{ ns }}

- name: Getting the Pod name in Pending state
  shell: kubectl get pods -n {{ ns }} -l {{ pod_label }}  -o jsonpath='{.items[?(@.status.phase=="Pending")].metadata.name}'
  register: new_pod_name
  until: "new_pod_name.stdout_lines is defined"
  delay: 5
  retries: 10 

- name: Uncordoning Node
  shell: kubectl uncordon {{ node_name.stdout }}
  register: uncordon_status
  failed_when: "'uncordoned' not in uncordon_status.stdout"

- name: Checking for Running status of pod
  shell: kubectl get pod {{ new_pod_name.stdout }} -n {{ ns }} -o jsonpath='{.status.phase}'
  register: status
  until: "'Running' in status.stdout"
  delay: 10
  retries: 10 

- name: Checking whether POD is scheduled on same NODE
  shell: kubectl get pod {{ new_pod_name.stdout }} -n {{ ns }} -o jsonpath='{.spec.nodeName}'
  register: node_schedule
  failed_when: "node_name.stdout not in node_schedule.stdout"      

