---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:

    - block:

         ## Creating test name

        - include_tasks: /e2e-tests/utils/fcm/create_testname.yml

         ## RECORD START-OF-TEST IN e2e RESULT CR

        - include_tasks: /e2e-tests/utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: "nfs-app-pod-failure"

        - name: Verify that the NFS Provisioner is running
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{ nfs_app_ns }}"
            app_lkey: "{{ nfs_app_label.split('=')[0] }}"
            app_lvalue: "{{ nfs_app_label.split('=')[1] }}"
            delay: 5
            retries: 60

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{ app_namespace }}"
            app_lkey: "{{ app_label.split('=')[0] }}"
            app_lvalue: "{{ app_label.split('=')[1] }}"
            delay: 5
            retries: 60

        - name: Obtain the NFS provisioner application pod name
          shell: >
            kubectl get pods -n {{ nfs_app_ns }} -l {{ nfs_app_label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name

          ## APPLICATION FAULT INJECTION

        - include_tasks: /e2e-tests/chaoslib/pumba/pod_failure_by_sigkill.yaml
          vars:
            action: "killapp"
            app_pod: "{{ app_pod_name.stdout }}"
            namespace: "{{ nfs_app_ns }}"
            label: "{{ nfs_app_label }}"
          when: cri == 'docker'

        - include_tasks: /e2e-tests/chaoslib/containerd_chaos/crictl-chaos.yml
          vars:
            action: "killapp"
            app_pod: "{{ app_pod_name.stdout }}"
            namespace: "{{ nfs_app_ns }}"
            label: "{{ nfs_app_label }}"
          when: cri == 'containerd'

        - include_tasks: /e2e-tests/chaoslib/crio_chaos/crio-crictl-chaos.yml
          vars:
            action: "killapp"
            app_pod: "{{ app_pod_name.stdout }}"
            namespace: "{{ nfs_app_ns }}"
            label: "{{ nfs_app_label }}"
          when: cri == 'cri-o'

        - name: Verify that the NFS provisioner is running
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{ nfs_app_ns }}"
            app_lkey: "{{ nfs_app_label.split('=')[0] }}"
            app_lvalue: "{{ nfs_app_label.split('=')[1] }}"
            delay: 5
            retries: 60

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{ app_namespace }}"
            app_lkey: "{{ app_label.split('=')[0] }}"
            app_lvalue: "{{ app_label.split('=')[1] }}"
            delay: 5
            retries: 60

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:

        ## RECORD END-OF-TEST IN e2e RESULT CR
        - include_tasks: /e2e-tests/utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
            chaostype: "nfs-app-pod-failure"

        - include_tasks: /e2e-tests/chaoslib/pumba/pod_failure_by_sigkill.yaml
          vars:
            action: "deletepumba"
            namespace: "{{ nfs_app_ns }}"
          when: cri == 'docker'

        - include_tasks: /e2e-tests/chaoslib/containerd_chaos/crictl-chaos.yml
          vars:
            action: "delete-containerd"
            namespace: "{{ nfs_app_ns }}"
          when: cri == 'containerd'

        - include_tasks: /e2e-tests/chaoslib/crio_chaos/crio-crictl-chaos.yml
          vars:
            action: "delete-crio"
            namespace: "{{ nfs_app_ns }}"
          when: cri == 'cri-o'
